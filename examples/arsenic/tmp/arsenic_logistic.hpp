
// Code generated by stanc fa623df
#include <stan/model/model_header.hpp>
namespace arsenic_logistic_model_namespace {


inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}

inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}


using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 

stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in '/Users/rob/.julia/dev/ParetoSmoothedImportanceSampling/src/../examples/arsenic/tmp/arsenic_logistic.stan', line 21, column 2 to column 13)",
                                                      " (in '/Users/rob/.julia/dev/ParetoSmoothedImportanceSampling/src/../examples/arsenic/tmp/arsenic_logistic.stan', line 22, column 2 to column 17)",
                                                      " (in '/Users/rob/.julia/dev/ParetoSmoothedImportanceSampling/src/../examples/arsenic/tmp/arsenic_logistic.stan', line 23, column 2 to column 20)",
                                                      " (in '/Users/rob/.julia/dev/ParetoSmoothedImportanceSampling/src/../examples/arsenic/tmp/arsenic_logistic.stan', line 36, column 2 to column 20)",
                                                      " (in '/Users/rob/.julia/dev/ParetoSmoothedImportanceSampling/src/../examples/arsenic/tmp/arsenic_logistic.stan', line 37, column 2 to column 16)",
                                                      " (in '/Users/rob/.julia/dev/ParetoSmoothedImportanceSampling/src/../examples/arsenic/tmp/arsenic_logistic.stan', line 40, column 4 to column 53)",
                                                      " (in '/Users/rob/.julia/dev/ParetoSmoothedImportanceSampling/src/../examples/arsenic/tmp/arsenic_logistic.stan', line 27, column 9 to column 10)",
                                                      " (in '/Users/rob/.julia/dev/ParetoSmoothedImportanceSampling/src/../examples/arsenic/tmp/arsenic_logistic.stan', line 27, column 2 to column 16)",
                                                      " (in '/Users/rob/.julia/dev/ParetoSmoothedImportanceSampling/src/../examples/arsenic/tmp/arsenic_logistic.stan', line 28, column 2 to column 25)",
                                                      " (in '/Users/rob/.julia/dev/ParetoSmoothedImportanceSampling/src/../examples/arsenic/tmp/arsenic_logistic.stan', line 29, column 2 to column 24)",
                                                      " (in '/Users/rob/.julia/dev/ParetoSmoothedImportanceSampling/src/../examples/arsenic/tmp/arsenic_logistic.stan', line 30, column 2 to column 34)",
                                                      " (in '/Users/rob/.julia/dev/ParetoSmoothedImportanceSampling/src/../examples/arsenic/tmp/arsenic_logistic.stan', line 32, column 2 to column 27)",
                                                      " (in '/Users/rob/.julia/dev/ParetoSmoothedImportanceSampling/src/../examples/arsenic/tmp/arsenic_logistic.stan', line 2, column 2 to column 17)",
                                                      " (in '/Users/rob/.julia/dev/ParetoSmoothedImportanceSampling/src/../examples/arsenic/tmp/arsenic_logistic.stan', line 3, column 2 to column 17)",
                                                      " (in '/Users/rob/.julia/dev/ParetoSmoothedImportanceSampling/src/../examples/arsenic/tmp/arsenic_logistic.stan', line 4, column 25 to column 26)",
                                                      " (in '/Users/rob/.julia/dev/ParetoSmoothedImportanceSampling/src/../examples/arsenic/tmp/arsenic_logistic.stan', line 4, column 2 to column 28)",
                                                      " (in '/Users/rob/.julia/dev/ParetoSmoothedImportanceSampling/src/../examples/arsenic/tmp/arsenic_logistic.stan', line 5, column 9 to column 10)",
                                                      " (in '/Users/rob/.julia/dev/ParetoSmoothedImportanceSampling/src/../examples/arsenic/tmp/arsenic_logistic.stan', line 5, column 11 to column 12)",
                                                      " (in '/Users/rob/.julia/dev/ParetoSmoothedImportanceSampling/src/../examples/arsenic/tmp/arsenic_logistic.stan', line 5, column 2 to column 16)",
                                                      " (in '/Users/rob/.julia/dev/ParetoSmoothedImportanceSampling/src/../examples/arsenic/tmp/arsenic_logistic.stan', line 9, column 9 to column 10)",
                                                      " (in '/Users/rob/.julia/dev/ParetoSmoothedImportanceSampling/src/../examples/arsenic/tmp/arsenic_logistic.stan', line 9, column 11 to column 12)",
                                                      " (in '/Users/rob/.julia/dev/ParetoSmoothedImportanceSampling/src/../examples/arsenic/tmp/arsenic_logistic.stan', line 9, column 2 to column 16)",
                                                      " (in '/Users/rob/.julia/dev/ParetoSmoothedImportanceSampling/src/../examples/arsenic/tmp/arsenic_logistic.stan', line 10, column 9 to column 10)",
                                                      " (in '/Users/rob/.julia/dev/ParetoSmoothedImportanceSampling/src/../examples/arsenic/tmp/arsenic_logistic.stan', line 10, column 2 to column 19)",
                                                      " (in '/Users/rob/.julia/dev/ParetoSmoothedImportanceSampling/src/../examples/arsenic/tmp/arsenic_logistic.stan', line 11, column 9 to column 10)",
                                                      " (in '/Users/rob/.julia/dev/ParetoSmoothedImportanceSampling/src/../examples/arsenic/tmp/arsenic_logistic.stan', line 11, column 2 to column 17)",
                                                      " (in '/Users/rob/.julia/dev/ParetoSmoothedImportanceSampling/src/../examples/arsenic/tmp/arsenic_logistic.stan', line 13, column 4 to column 31)",
                                                      " (in '/Users/rob/.julia/dev/ParetoSmoothedImportanceSampling/src/../examples/arsenic/tmp/arsenic_logistic.stan', line 14, column 4 to column 27)",
                                                      " (in '/Users/rob/.julia/dev/ParetoSmoothedImportanceSampling/src/../examples/arsenic/tmp/arsenic_logistic.stan', line 16, column 6 to column 46)",
                                                      " (in '/Users/rob/.julia/dev/ParetoSmoothedImportanceSampling/src/../examples/arsenic/tmp/arsenic_logistic.stan', line 15, column 4 to line 16, column 46)",
                                                      " (in '/Users/rob/.julia/dev/ParetoSmoothedImportanceSampling/src/../examples/arsenic/tmp/arsenic_logistic.stan', line 12, column 17 to line 17, column 3)",
                                                      " (in '/Users/rob/.julia/dev/ParetoSmoothedImportanceSampling/src/../examples/arsenic/tmp/arsenic_logistic.stan', line 12, column 2 to line 17, column 3)",
                                                      " (in '/Users/rob/.julia/dev/ParetoSmoothedImportanceSampling/src/../examples/arsenic/tmp/arsenic_logistic.stan', line 22, column 9 to column 10)",
                                                      " (in '/Users/rob/.julia/dev/ParetoSmoothedImportanceSampling/src/../examples/arsenic/tmp/arsenic_logistic.stan', line 36, column 9 to column 10)",
                                                      " (in '/Users/rob/.julia/dev/ParetoSmoothedImportanceSampling/src/../examples/arsenic/tmp/arsenic_logistic.stan', line 37, column 9 to column 10)"};



class arsenic_logistic_model final : public model_base_crtp<arsenic_logistic_model> {

 private:
  int lcm_sym39__;
  int lcm_sym38__;
  double lcm_sym37__;
  double lcm_sym36__;
  double lcm_sym35__;
  double lcm_sym34__;
  double lcm_sym33__;
  double lcm_sym32__;
  int lcm_sym31__;
  int lcm_sym30__;
  int lcm_sym29__;
  double lcm_sym28__;
  double lcm_sym27__;
  double lcm_sym26__;
  double lcm_sym25__;
  int p;
  int N;
  std::vector<int> y;
  Eigen::Matrix<double, -1, -1> x;
  Eigen::Matrix<double, -1, -1> z;
  Eigen::Matrix<double, -1, 1> mean_x;
  Eigen::Matrix<double, -1, 1> sd_x;
 
 public:
  ~arsenic_logistic_model() { }
  
  inline std::string model_name() const final { return "arsenic_logistic_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 fa623df", "stancflags = --warn-pedantic --O"};
  }
  
  
  arsenic_logistic_model(stan::io::var_context& context__,
                         unsigned int random_seed__ = 0,
                         std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "arsenic_logistic_model_namespace::arsenic_logistic_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 13;
      context__.validate_dims("data initialization","p","int",
          context__.to_vec());
      p = std::numeric_limits<int>::min();
      
      current_statement__ = 13;
      p = context__.vals_i("p")[(1 - 1)];
      current_statement__ = 13;
      current_statement__ = 13;
      check_greater_or_equal(function__, "p", p, 0);
      current_statement__ = 14;
      context__.validate_dims("data initialization","N","int",
          context__.to_vec());
      N = std::numeric_limits<int>::min();
      
      current_statement__ = 14;
      N = context__.vals_i("N")[(1 - 1)];
      current_statement__ = 14;
      current_statement__ = 14;
      check_greater_or_equal(function__, "N", N, 0);
      current_statement__ = 15;
      validate_non_negative_index("y", "N", N);
      current_statement__ = 16;
      context__.validate_dims("data initialization","y","int",
          context__.to_vec(N));
      y = std::vector<int>(N, std::numeric_limits<int>::min());
      
      current_statement__ = 16;
      assign(y, nil_index_list(), context__.vals_i("y"),
        "assigning variable y");
      lcm_sym29__ = logical_gte(N, 1);
      if (lcm_sym29__) {
        current_statement__ = 16;
        current_statement__ = 16;
        check_greater_or_equal(function__, "y[sym1__]", y[(1 - 1)], 0);
        for (int sym1__ = 2; sym1__ <= N; ++sym1__) {
          current_statement__ = 16;
          current_statement__ = 16;
          check_greater_or_equal(function__, "y[sym1__]", y[(sym1__ - 1)], 0);
        }
      } 
      current_statement__ = 16;
      if (lcm_sym29__) {
        current_statement__ = 16;
        current_statement__ = 16;
        check_less_or_equal(function__, "y[sym1__]", y[(1 - 1)], 1);
        for (int sym1__ = 2; sym1__ <= N; ++sym1__) {
          current_statement__ = 16;
          current_statement__ = 16;
          check_less_or_equal(function__, "y[sym1__]", y[(sym1__ - 1)], 1);}
      } 
      current_statement__ = 17;
      validate_non_negative_index("x", "N", N);
      current_statement__ = 18;
      validate_non_negative_index("x", "p", p);
      current_statement__ = 19;
      context__.validate_dims("data initialization","x","double",
          context__.to_vec(N, p));
      x = Eigen::Matrix<double, -1, -1>(N, p);
      stan::math::fill(x, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<double> x_flat__;
        current_statement__ = 19;
        assign(x_flat__, nil_index_list(), context__.vals_r("x"),
          "assigning variable x_flat__");
        current_statement__ = 19;
        pos__ = 1;
        lcm_sym30__ = logical_gte(p, 1);
        if (lcm_sym30__) {
          current_statement__ = 19;
          if (lcm_sym29__) {
            current_statement__ = 19;
            assign(x,
              cons_list(index_uni(1),
                cons_list(index_uni(1), nil_index_list())),
              x_flat__[(1 - 1)], "assigning variable x");
            current_statement__ = 19;
            pos__ = 2;
            for (int sym2__ = 2; sym2__ <= N; ++sym2__) {
              current_statement__ = 19;
              assign(x,
                cons_list(index_uni(sym2__),
                  cons_list(index_uni(1), nil_index_list())),
                x_flat__[(pos__ - 1)], "assigning variable x");
              current_statement__ = 19;
              pos__ = (pos__ + 1);}
          } 
          for (int sym1__ = 2; sym1__ <= p; ++sym1__) {
            current_statement__ = 19;
            if (lcm_sym29__) {
              current_statement__ = 19;
              assign(x,
                cons_list(index_uni(1),
                  cons_list(index_uni(sym1__), nil_index_list())),
                x_flat__[(pos__ - 1)], "assigning variable x");
              current_statement__ = 19;
              pos__ = (pos__ + 1);
              for (int sym2__ = 2; sym2__ <= N; ++sym2__) {
                current_statement__ = 19;
                assign(x,
                  cons_list(index_uni(sym2__),
                    cons_list(index_uni(sym1__), nil_index_list())),
                  x_flat__[(pos__ - 1)], "assigning variable x");
                current_statement__ = 19;
                pos__ = (pos__ + 1);}
            } }
        } 
      }
      current_statement__ = 20;
      validate_non_negative_index("z", "N", N);
      current_statement__ = 21;
      validate_non_negative_index("z", "p", p);
      current_statement__ = 22;
      z = Eigen::Matrix<double, -1, -1>(N, p);
      stan::math::fill(z, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 23;
      validate_non_negative_index("mean_x", "p", p);
      current_statement__ = 24;
      mean_x = Eigen::Matrix<double, -1, 1>(p);
      stan::math::fill(mean_x, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 25;
      validate_non_negative_index("sd_x", "p", p);
      current_statement__ = 26;
      sd_x = Eigen::Matrix<double, -1, 1>(p);
      stan::math::fill(sd_x, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 32;
      if (lcm_sym30__) {
        current_statement__ = 27;
        assign(mean_x, cons_list(index_uni(1), nil_index_list()),
          mean(col(x, 1)), "assigning variable mean_x");
        current_statement__ = 28;
        assign(sd_x, cons_list(index_uni(1), nil_index_list()),
          sd(col(x, 1)), "assigning variable sd_x");
        current_statement__ = 30;
        if (lcm_sym29__) {
          current_statement__ = 29;
          assign(z,
            cons_list(index_uni(1),
              cons_list(index_uni(1), nil_index_list())),
            ((rvalue(x,
                cons_list(index_uni(1),
                  cons_list(index_uni(1), nil_index_list())), "x") -
               mean_x[(1 - 1)]) / sd_x[(1 - 1)]), "assigning variable z");
          for (int i = 2; i <= N; ++i) {
            current_statement__ = 29;
            assign(z,
              cons_list(index_uni(i),
                cons_list(index_uni(1), nil_index_list())),
              ((rvalue(x,
                  cons_list(index_uni(i),
                    cons_list(index_uni(1), nil_index_list())), "x") -
                 mean_x[(1 - 1)]) / sd_x[(1 - 1)]), "assigning variable z");}
        } 
        for (int j = 2; j <= p; ++j) {
          current_statement__ = 27;
          assign(mean_x, cons_list(index_uni(j), nil_index_list()),
            mean(col(x, j)), "assigning variable mean_x");
          current_statement__ = 28;
          assign(sd_x, cons_list(index_uni(j), nil_index_list()),
            sd(col(x, j)), "assigning variable sd_x");
          current_statement__ = 30;
          if (lcm_sym29__) {
            current_statement__ = 29;
            assign(z,
              cons_list(index_uni(1),
                cons_list(index_uni(j), nil_index_list())),
              ((rvalue(x,
                  cons_list(index_uni(1),
                    cons_list(index_uni(j), nil_index_list())), "x") -
                 mean_x[(j - 1)]) / sd_x[(j - 1)]), "assigning variable z");
            for (int i = 2; i <= N; ++i) {
              current_statement__ = 29;
              assign(z,
                cons_list(index_uni(i),
                  cons_list(index_uni(j), nil_index_list())),
                ((rvalue(x,
                    cons_list(index_uni(i),
                      cons_list(index_uni(j), nil_index_list())), "x") -
                   mean_x[(j - 1)]) / sd_x[(j - 1)]), "assigning variable z");
            }
          } }
      } 
      current_statement__ = 33;
      validate_non_negative_index("beta", "p", p);
      current_statement__ = 34;
      validate_non_negative_index("log_lik", "N", N);
      current_statement__ = 35;
      validate_non_negative_index("eta", "N", N);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += 1;
      num_params_r__ += p;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "arsenic_logistic_model_namespace::log_prob";
(void) function__;  // suppress unused var warning

    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      double lcm_sym24__;
      double lcm_sym23__;
      double lcm_sym22__;
      double lcm_sym21__;
      Eigen::Matrix<local_scalar_t__, -1, 1> lcm_sym20__;
      local_scalar_t__ beta0;
      beta0 = DUMMY_VAR__;
      
      current_statement__ = 1;
      beta0 = in__.scalar();
      Eigen::Matrix<local_scalar_t__, -1, 1> beta;
      beta = Eigen::Matrix<local_scalar_t__, -1, 1>(p);
      stan::math::fill(beta, DUMMY_VAR__);
      
      current_statement__ = 2;
      beta = in__.vector(p);
      local_scalar_t__ phi;
      phi = DUMMY_VAR__;
      
      current_statement__ = 3;
      phi = in__.scalar();
      current_statement__ = 3;
      if (jacobian__) {
        current_statement__ = 3;
        phi = stan::math::lb_constrain(phi, 0, lp__);
      } else {
        current_statement__ = 3;
        phi = stan::math::lb_constrain(phi, 0);
      }
      {
        current_statement__ = 7;
        validate_non_negative_index("eta", "N", N);
        Eigen::Matrix<local_scalar_t__, -1, 1> eta;
        eta = Eigen::Matrix<local_scalar_t__, -1, 1>(N);
        stan::math::fill(eta, DUMMY_VAR__);
        
        current_statement__ = 9;
        lp_accum__.add(normal_lpdf<propto__>(beta0, 0, phi));
        current_statement__ = 10;
        lp_accum__.add(normal_lpdf<propto__>(beta, 0, phi));
        current_statement__ = 11;
        lp_accum__.add(double_exponential_lpdf<propto__>(phi, 0, 10));
        assign(lcm_sym20__, nil_index_list(), add(beta0, multiply(z, beta)),
          "assigning variable lcm_sym20__");
        assign(eta, nil_index_list(), lcm_sym20__, "assigning variable eta");
        current_statement__ = 12;
        lp_accum__.add(bernoulli_logit_lpmf<propto__>(y, lcm_sym20__));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "arsenic_logistic_model_namespace::write_array";
(void) function__;  // suppress unused var warning

    (void) function__;  // suppress unused var warning

    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning

    
    try {
      double lcm_sym19__;
      double lcm_sym18__;
      double lcm_sym17__;
      double lcm_sym16__;
      double lcm_sym15__;
      double lcm_sym14__;
      double lcm_sym13__;
      double lcm_sym12__;
      Eigen::Matrix<double, -1, 1> lcm_sym11__;
      int lcm_sym10__;
      int lcm_sym9__;
      int lcm_sym8__;
      int lcm_sym7__;
      double beta0;
      beta0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      beta0 = in__.scalar();
      Eigen::Matrix<double, -1, 1> beta;
      beta = Eigen::Matrix<double, -1, 1>(p);
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      beta = in__.vector(p);
      double phi;
      phi = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      phi = in__.scalar();
      current_statement__ = 3;
      phi = stan::math::lb_constrain(phi, 0);
      vars__.emplace_back(beta0);
      if (logical_gte(p, 1)) {
        vars__.emplace_back(beta[(1 - 1)]);
        for (int sym1__ = 2; sym1__ <= p; ++sym1__) {
          vars__.emplace_back(beta[(sym1__ - 1)]);}
      } 
      vars__.emplace_back(phi);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> log_lik;
      log_lik = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(log_lik, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> eta;
      eta = Eigen::Matrix<double, -1, 1>(N);
      stan::math::fill(eta, std::numeric_limits<double>::quiet_NaN());
      
      assign(lcm_sym11__, nil_index_list(), add(beta0, multiply(z, beta)),
        "assigning variable lcm_sym11__");
      assign(eta, nil_index_list(), lcm_sym11__, "assigning variable eta");
      lcm_sym7__ = logical_gte(N, 1);
      if (lcm_sym7__) {
        current_statement__ = 6;
        assign(log_lik, cons_list(index_uni(1), nil_index_list()),
          bernoulli_logit_lpmf<false>(y[(1 - 1)], lcm_sym11__[(1 - 1)]),
          "assigning variable log_lik");
        for (int i = 2; i <= N; ++i) {
          current_statement__ = 6;
          assign(log_lik, cons_list(index_uni(i), nil_index_list()),
            bernoulli_logit_lpmf<false>(y[(i - 1)], lcm_sym11__[(i - 1)]),
            "assigning variable log_lik");}
      } 
      if (lcm_sym7__) {
        vars__.emplace_back(log_lik[(1 - 1)]);
        for (int sym1__ = 2; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(log_lik[(sym1__ - 1)]);}
      } 
      if (lcm_sym7__) {
        vars__.emplace_back(lcm_sym11__[(1 - 1)]);
        for (int sym1__ = 2; sym1__ <= N; ++sym1__) {
          vars__.emplace_back(lcm_sym11__[(sym1__ - 1)]);}
      } 
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      double lcm_sym6__;
      double lcm_sym5__;
      double lcm_sym4__;
      double lcm_sym3__;
      int lcm_sym2__;
      int lcm_sym1__;
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      double beta0;
      beta0 = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 1;
      beta0 = context__.vals_r("beta0")[(1 - 1)];
      Eigen::Matrix<double, -1, 1> beta;
      beta = Eigen::Matrix<double, -1, 1>(p);
      stan::math::fill(beta, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<double> beta_flat__;
        current_statement__ = 2;
        assign(beta_flat__, nil_index_list(), context__.vals_r("beta"),
          "assigning variable beta_flat__");
        current_statement__ = 2;
        pos__ = 1;
        lcm_sym1__ = logical_gte(p, 1);
        if (lcm_sym1__) {
          current_statement__ = 2;
          assign(beta, cons_list(index_uni(1), nil_index_list()),
            beta_flat__[(1 - 1)], "assigning variable beta");
          current_statement__ = 2;
          pos__ = 2;
          for (int sym1__ = 2; sym1__ <= p; ++sym1__) {
            current_statement__ = 2;
            assign(beta, cons_list(index_uni(sym1__), nil_index_list()),
              beta_flat__[(pos__ - 1)], "assigning variable beta");
            current_statement__ = 2;
            pos__ = (pos__ + 1);}
        } 
      }
      double phi;
      phi = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      phi = context__.vals_r("phi")[(1 - 1)];
      double phi_free__;
      phi_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 3;
      phi_free__ = stan::math::lb_free(phi, 0);
      vars__.emplace_back(beta0);
      if (lcm_sym1__) {
        vars__.emplace_back(beta[(1 - 1)]);
        for (int sym1__ = 2; sym1__ <= p; ++sym1__) {
          vars__.emplace_back(beta[(sym1__ - 1)]);}
      } 
      vars__.emplace_back(phi_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("beta0");
    names__.emplace_back("beta");
    names__.emplace_back("phi");
    names__.emplace_back("log_lik");
    names__.emplace_back("eta");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(p)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "beta0");
    for (int sym40__ = 1; sym40__ <= p; ++sym40__) {
      {
        param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym40__));
      }}
    param_names__.emplace_back(std::string() + "phi");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym40__ = 1; sym40__ <= N; ++sym40__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym40__));
        }}
      for (int sym40__ = 1; sym40__ <= N; ++sym40__) {
        {
          param_names__.emplace_back(std::string() + "eta" + '.' + std::to_string(sym40__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    param_names__.emplace_back(std::string() + "beta0");
    for (int sym40__ = 1; sym40__ <= p; ++sym40__) {
      {
        param_names__.emplace_back(std::string() + "beta" + '.' + std::to_string(sym40__));
      }}
    param_names__.emplace_back(std::string() + "phi");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym40__ = 1; sym40__ <= N; ++sym40__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym40__));
        }}
      for (int sym40__ = 1; sym40__ <= N; ++sym40__) {
        {
          param_names__.emplace_back(std::string() + "eta" + '.' + std::to_string(sym40__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"beta0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" << p << "},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"eta\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"beta0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" << p << "},\"block\":\"parameters\"},{\"name\":\"phi\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"},{\"name\":\"eta\",\"type\":{\"name\":\"vector\",\"length\":" << N << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  

    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        

};
}
using stan_model = arsenic_logistic_model_namespace::arsenic_logistic_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return arsenic_logistic_model_namespace::profiles__;
}

#endif


